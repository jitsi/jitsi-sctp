name: Java CI with Maven and native builds

on:
  push:
#    branches: [ master ] # TODO
  pull_request:
#    branches: [ master ] $ TODO

env:
  # Java version to use for the release
  RELEASE_JAVA_VERSION: 11
  UBUNTU_DIST: focal
  UBUNTU_MIRROR_AMD64: http://azure.archive.ubuntu.com/ubuntu
  DOCKER_BUILDKIT: 1

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  javah:

    runs-on: ubuntu-latest

    name: Compile and generate JNI headers

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up JDK ${{ env.RELEASE_JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ env.RELEASE_JAVA_VERSION }}
          cache: maven

      - name: Build with Maven
        run: mvn -B compile

      - name: Upload JNI headers
        uses: actions/upload-artifact@v3
        with:
          name: javah
          path: target/native

  ubuntu_natives:
    needs: javah
    runs-on: ubuntu-latest
    name: Ubuntu Natives (${{ matrix.arch }})
    strategy:
      matrix:
        arch:
          - amd64
          - arm64
          - ppc64el

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Get JNI headers
        uses: actions/download-artifact@v3
        with:
          name: javah
          path: target/native

      - name: Build natives in Docker
        run: resources/ubuntu-build-docker.sh ${{ matrix.arch }} ${{ env.UBUNTU_DIST }} ${{ env.RELEASE_JAVA_VERSION }}

      - name: Upload lib as artifact
        uses: actions/upload-artifact@v3
        with:
          name: linux-${{ matrix.arch }}
          path: src/main/resources/*

  mac_natives:
    needs: javah
    runs-on: macos-latest
    name: Mac Natives (${{ matrix.arch }})
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x86_64
          - arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up JDK ${{ env.RELEASE_JAVA_VERSION }}
        id: install_java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: ${{ env.RELEASE_JAVA_VERSION }}
          architecture: ${{ matrix.arch }}

      - name: Get JNI headers
        uses: actions/download-artifact@v3
        with:
          name: javah
          path: target/native

      - name: Install autotools
        run: brew install autoconf automake libtool

      - name: Build natives
        run: resources/macos-build.sh "${{ steps.install_java.outputs.path }}" "${{ matrix.arch }}"

      - name: Upload lib as artifact
        uses: actions/upload-artifact@v3
        with:
          name: darwin-${{ matrix.arch }}
          path: src/main/resources/*

  release:
    name: Test including natives [and release]
    needs:
      - javah
      - ubuntu_natives
      - mac_natives
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up JDK ${{ env.RELEASE_JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ env.RELEASE_JAVA_VERSION }}
          cache: maven

      - name: Download natives
        uses: actions/download-artifact@v3
        with:
          path: target

      - name: Copy natives for Maven
        run: |
          BASEDIR=$(pwd)/src/main/resources
          mkdir -p $BASEDIR
          cd target
          for dist in */*/ ; do
            last_dir=$(basename $dist)
            if [[ "$last_dir" =~ ^(linux|darwin) ]]; then
              mkdir -p "$BASEDIR/$last_dir" || true
              cp "$dist"/*.{so,dylib} "$BASEDIR/$last_dir" || true
            fi;
          done;

      - name: Download natives
        uses: actions/download-artifact@v3
        with:
          path: target

      - name: Copy natives for Maven
        run: |
          BASEDIR=$(pwd)/src/main/resources
          mkdir -p $BASEDIR
          cd target
          for dist in */*/ ; do
            last_dir=$(basename $dist)
            if [[ "$last_dir" =~ ^(linux|darwin) ]]; then
              mkdir -p "$BASEDIR/$last_dir" || true
              cp "$dist"/*.{so,dylib} "$BASEDIR/$last_dir" || true
            fi;
          done;

      - name: Run Maven tests with native
        run: mvn -B verify
